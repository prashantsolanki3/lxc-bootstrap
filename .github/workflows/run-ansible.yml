# This is a basic workflow to help you get started with Actions

name: Run Ansible on VM

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  # push:
  #   branches: [ "main" ]
  # pull_request:
  #   branches: [ "main" ]
  workflow_run:
    workflows: ["Recreate VM Bootstrap on Proxmox Home Lab"]
    types:
      - completed
  
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  

env:
  repo: ${{ github.event.repository.name }}
  env_path: /mnt/env

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  configure:
    strategy: 
      matrix:
        os: [lxc-bootstrap]
    runs-on: ${{ matrix.os }}

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
        with:
          repository: prashantsolanki3/dots

      - name: Install ansible
        run: python3 -m pip install ansible

      - name: Install ansible-galaxy
        run: ansible-galaxy install -r requirements.yml

      - name: Extract ip from tfstate and save to runner env
        run: |
          ipv4=$(jq -r '.resources[].instances[].attributes.network[] | select(.name == "eth0").ip' $env_path/$repo/state/terraform.tfstate)
          ipv4_data=$(jq -r '.resources[].instances[].attributes.network[] | select(.name == "eth0").ip' $env_path/$repo/state/terraform.tfstate)
          echo "ipv4=$ipv4" >> $GITHUB_ENV
          echo "ipv4_data=$ipv4_data" >> $GITHUB_ENV
          echo $GITHUB_ENV
      
      - name: Remove old host key
        run: ssh-keygen -R $ipv4

      - name: ansible-playbook
        run: ansible-playbook -i $env_path/$repo/bootstrap_hosts -e "@$env_path/$repo/bootstrap_host_vars.yml" bootstrap.yml
