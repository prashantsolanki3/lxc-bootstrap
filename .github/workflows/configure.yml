# This is a basic workflow to help you get started with Actions

name: Configure Container

# Controls when the workflow will run
on:
  workflow_run:
    workflows: ["Recreate Container"]
    types:
      - completed
  
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  push:
    paths:
      - .github/workflows/run-ansible.yml
  

env:
  repo: ${{ github.event.repository.name }}
  env_path: /mnt/env

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  configure:
    strategy: 
      matrix:
        os: [lxc-bootstrap]
    runs-on: ${{ matrix.os }}

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
        with:
          repository: prashantsolanki3/dots

      - name: Install ansible
        run: python3 -m pip install ansible

      - name: Install ansible-galaxy
        run: ansible-galaxy install -r requirements.yml

      - name: Extract ip from tfstate and save to runner env
        run: |
          ipv4=$(jq -r '.resources[].instances[].attributes.network[] | select(.name == "eth0").ip' $env_path/$repo/state/terraform.tfstate)
          ipv4_data=$(jq -r '.resources[].instances[].attributes.network[] | select(.name == "eth0").ip' $env_path/$repo/state/terraform.tfstate)

          IFS='/' read -ra ipv4_list <<< "$ipv4"
          IFS='/' read -ra ipv4_data_list <<< "$ipv4_data"
          echo "ipv4=${ipv4_list[1]}" >> $GITHUB_ENV
          echo "ipv4_data=${ipv4_data_list[1]}" >> $GITHUB_ENV

      - name: ansible-playbook
        run: ansible-playbook -i $env_path/$repo/bootstrap_hosts -e "@$env_path/$repo/bootstrap_host_vars.yml" bootstrap.yml
